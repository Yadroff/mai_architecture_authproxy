components_manager:
    task_processors:                  # Task processor is an executor for coroutine tasks

        main-task-processor:          # Make a task processor for CPU-bound coroutine tasks.
            worker_threads: $worker-threads         # Process tasks in 4 threads.

        fs-task-processor:            # Make a separate task processor for filesystem bound tasks.
            worker_threads: $worker-fs-threads

    default_task_processor: main-task-processor

    static_config_validation:
        validate_all_components: true

    components:                       # Configuring components that were registered via component_list
        server:
            listener:                 # configuring the main listening socket...
                port: $server-port            # ...to listen on this port and...
                task_processor: main-task-processor    # ...process incoming requests on this task processor.
        logging:
            fs-task-processor: fs-task-processor
            loggers:
                default:
                    file_path: '@stderr'
                    level: $logger-level
                    overflow_behavior: discard  # Drop logs if the system is too busy to write them down.

        dynamic-config:
            fs-cache-path: /var/cache/service/configs.json
            fs-task-processor: fs-task-processor
            updates-enabled: true
            defaults-path:
                 - "/etc/authproxy/fallback.json"

        testsuite-support: {}

        http-client:
            load-enabled: $is_testing
            fs-task-processor: fs-task-processor

        dns-client:
            fs-task-processor: fs-task-processor

        tests-control:
            load-enabled: $is_testing
            path: /tests/{action}
            method: POST
            task_processor: main-task-processor
        handler-ping:
            path: /ping
            method: GET
            task_processor: main-task-processor
            throttling_enabled: false
            url_trailing_slash: strict-match

        handler-hello:                    # Finally! Our handler.
            path: /hello                  # Registering handler by URL '/hello'.
            method: GET,POST              # It will only reply to GET (HEAD) and POST requests.
            task_processor: main-task-processor  # Run it on CPU bound task processor

        
        jwt-auth-checker:
            load-enabled: true
            secret: 00ca2985e09dc63c1b1ffb0fd12d855d8db4e8bc2060cacd30db721dd79ef983688db720eab830d742b0e51e8e4d7e9962968ce511896c5a2243945f422b0db7c37945f44a6c99677f323d6d77f6ebf416fe8f845a4b34884fead22c4fc8a1d3062f29b555cb65d7ea54a90c2f53bda98f50c7fb16287a0b03d8a0a10cd552313ecbeb8984ed4d01f3eea67876facc60fdb44a11a336e02548b1d49523d60f02cbc77bd9a2868ceaca0b43409cdfa727fd18b540afb605e5b3aad97556e6e06f1196711e9ac0e015606693a86756beff034b370f0b6634f1a53c73d8e6a161222e0fe8157e919263929733514436c106e08bea94972e0ddf80cf23ebf703a779

        # proxy-handler:
        #     path: "/authproxy/{rest:.*}"  # Ловим все пути после префикса
        #     method: "GET,POST,PUT,DELETE"  # Разрешенные методы
        #     task_processor: main-task-processor
        #     auth:
        #         type: jwt-auth
        #     proxy_settings:
        #         target_url: "http://backend:8080"
        #         service_prefix: "/api-proxy"